server {
  access_log /var/log/nginx/access.log;
  server_name _;
  client_max_body_size 4G;

  location /static/ {
    alias  /opt/webapp/static/;
  }

  location /media/ {
    alias  /opt/webapp/media/;
  }

  location /health-record {
    proxy_pass http://127.0.0.1:8000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
  }

  location /api {
    error_page 403 /403.html;
    add_header X-Frame-Options "DENY";
    add_header X-XSS-Protection "1; mode=block";

    # an HTTP header important enough to have its own Wikipedia entry:
    # http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    # proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll stuff. It's also safe to set if you're
    # using only serving fast clients with Unicorn + nginx.
    # Otherwise you _want_ nginx to buffer responses to slow
    # clients, really.
    # proxy_buffering off;

    proxy_connect_timeout 3600s;
    proxy_read_timeout 3600s;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    if (!-f $request_filename) {
      proxy_pass http://127.0.0.1:8000;
      break;
    }
  }


  location / {
    # First attempt to serve request as file, then
    # as directory, then redirect to index(angular) if no file found.
    try_files $uri $uri/ /index.html;
    root  /opt/webui/;
    index index.html;
  }
  listen 80;
}